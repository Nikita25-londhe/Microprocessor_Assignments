// LRU.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include<string.h>
#include<vector>
#include<map>;
#include<algorithm>
using namespace std;
class Page_Table
{
public:
	int faults;
	int count;
	vector<int>Frames;
	map<int, int>mp;
	int size;
	Page_Table(int a)
	{
		faults = 0;
		size = a;
		count = 1;
	}
	bool full()
	{
		return Frames.size() == size;
	}
	void create_map(string str)
	{
		for (int i = 0; i < str.length(); i++)
		{
			mp[str[i] - '0'] = INT_MAX;
		}
	}
	void replace_LRU(int page_no)
	{
		int min = INT_MAX;
		int replace = -1;
		for (auto it = mp.begin(); it != mp.end(); it++)
		{
			if (it->second < min)
			{
				min = it->second;
				replace = it->first;
			}
		}
		cout << "\npage to be replace =" << replace;
		faults++;
		mp[replace] = INT_MAX;
		mp[page_no] = count;
		count++;
		auto it = find(Frames.begin(), Frames.end(), replace);
		int ind =it- Frames.begin();
		if (ind >= 0 && ind<= size)
		{
			Frames[ind] = page_no;
		}
	}
	void print(vector<int>Frames)
	{
		for (int i = 0; i < Frames.size(); i++)
		{
			cout << Frames[i] << " ";
		}
		cout << endl;
	}
	int fault_count(string str)
	{
		create_map(str);
		for (int i = 0; i < str.length(); i++)
		{
			if (!full())
			{
				Frames.push_back(str[i]-'0');
				mp[str[i] - '0'] = count;
				count++;
			}
			else if(find(Frames.begin(),Frames.end(),str[i]-'0')==Frames.end())
			{
				replace_LRU(str[i]-'0');
			}
			else
			{
				mp[str[i] - '0'] = count;
				count++;
			}
			print(Frames);
		}
		return faults+size;
	}

};
int main()
{
	Page_Table p1(3);
	cout<<"\nNo of page faults :"<<p1.fault_count("70120304230321201701");

}
